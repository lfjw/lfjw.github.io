{"title":"javascript中的apply和call","slug":"javascript中的apply和call","date":"2018-04-24T08:17:16.000Z","updated":"2018-05-09T09:07:34.000Z","comments":true,"path":"api/articles/javascript中的apply和call.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>今天深入理解一下js中的这个点</p>\n<h3 id=\"apply：方法能劫持另外一个对象的方法，继承另外一个对象的属性\"><a href=\"#apply：方法能劫持另外一个对象的方法，继承另外一个对象的属性\" class=\"headerlink\" title=\"apply：方法能劫持另外一个对象的方法，继承另外一个对象的属性.\"></a>apply：方法能劫持另外一个对象的方法，继承另外一个对象的属性.</h3><ul>\n<li><p>Function.apply(obj,args)方法能接收两个参数</p>\n</li>\n<li><p>obj：这个对象将代替Function类里this对象</p>\n</li>\n<li><p>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p>\n</li>\n</ul>\n<p>来个例子可以更好的理解</p>\n<p>eg :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function Parent (name,age) &#123;</span><br><span class=\"line\">\tthis.name = name</span><br><span class=\"line\">\tthis.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Children (name,age,className) &#123;</span><br><span class=\"line\">\tParent.apply(this,arguments)</span><br><span class=\"line\">\tthis.className = className </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Children(1,2,3)</span><br><span class=\"line\"></span><br><span class=\"line\">//p =&gt; Children &#123;name: 1, age: 2, className: 3&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"如果你看到-arguments有点懵逼，请查看我的另一个文章可查看我的另一篇内容\"><a href=\"#如果你看到-arguments有点懵逼，请查看我的另一个文章可查看我的另一篇内容\" class=\"headerlink\" title=\"如果你看到 arguments有点懵逼，请查看我的另一个文章可查看我的另一篇内容\"></a>如果你看到 arguments有点懵逼，请查看我的另一个文章可查看我的另一篇内容</h4><h3 id=\"call：和apply的意思一样-只不过是参数列表不一样\"><a href=\"#call：和apply的意思一样-只不过是参数列表不一样\" class=\"headerlink\" title=\"call：和apply的意思一样,只不过是参数列表不一样.\"></a>call：和apply的意思一样,只不过是参数列表不一样.</h3><ul>\n<li><p>Function.call(obj,[param1[,param2[,…[,paramN]]]])</p>\n</li>\n<li><p>obj：这个对象将代替Function类里this对象</p>\n</li>\n<li><p>params：这个是一个参数列表</p>\n</li>\n</ul>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function Parent (name,age) &#123;</span><br><span class=\"line\">\tthis.name = name</span><br><span class=\"line\">\tthis.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Children (name,age,className) &#123;</span><br><span class=\"line\">\tParent.call(this,name,age)</span><br><span class=\"line\">\tthis.className = className </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Children(1,2,3)</span><br><span class=\"line\"></span><br><span class=\"line\">//p =&gt; Children &#123;name: 1, age: 2, className: 3&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply和call-应用场景\"><a href=\"#apply和call-应用场景\" class=\"headerlink\" title=\"apply和call 应用场景\"></a>apply和call 应用场景</h3><ul>\n<li><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Parent的时候参数的列表是对应一致的(也就是Parent和Children的参数列表前两位是一致的) 就可以采用 apply </p>\n</li>\n<li><p>如果我的Parent的参数列表是这样的(age,name),而Children的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Parent.call(this,age,name,grade))</p>\n</li>\n</ul>\n<h3 id=\"apply的巧妙用法\"><a href=\"#apply的巧妙用法\" class=\"headerlink\" title=\"apply的巧妙用法\"></a>apply的巧妙用法</h3><p>这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p>\n<ul>\n<li>Math.max 可以实现得到数组中最大的一项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let arr = [1,2,3,5]</span><br><span class=\"line\"></span><br><span class=\"line\">let n = Math.max.apply(null ,arr)</span><br><span class=\"line\"></span><br><span class=\"line\">// n 5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组合并</li>\n</ul>\n<p>再比如数组的push方法</p>\n<p>var arr1=[1,3,4]</p>\n<p>var arr2=[3,4,5]</p>\n<p>如果我们要把 arr2展开，然后一个一个追加到 arr1中去，最后让  arr1=[1,3,4,3,4,5]</p>\n<p>arr1.push(arr2)  显然是不行的。 因为这样做会得到  [1,3,4, [3,4,5] ]</p>\n<p>我们只能用一个循环去一个一个的push (当然也可以用 arr1.concat(arr2) 但是concat方法并不改变 arr1本身)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arrLen=arr2.length</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i=0;i&lt;arrLen;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr1.push(arr2[i])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自从有了 Apply ,事情就变得如此简单</p>\n<p>Array.prototype.push.apply(arr1,arr2)</p>\n<p>点滴汇聚能量!</p>\n<!-- 参考学习文章链接\n\nhttp://www.cnblogs.com/xiaohongwu/archive/2011/06/15/2081237.html\n\nhttps://blog.csdn.net/bao19901210/article/details/21614761 -->\n","categories":[],"tags":[]}