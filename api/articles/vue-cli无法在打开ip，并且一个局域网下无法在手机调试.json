{"title":"vue-cli无法在打开ip，并且一个局域网下无法在手机调试","slug":"vue-cli无法在打开ip，并且一个局域网下无法在手机调试","date":"2018-04-20T03:35:19.000Z","updated":"2018-05-09T09:40:18.000Z","comments":true,"path":"api/articles/vue-cli无法在打开ip，并且一个局域网下无法在手机调试.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h3 id=\"无法打开ip查看\"><a href=\"#无法打开ip查看\" class=\"headerlink\" title=\"无法打开ip查看\"></a>无法打开ip查看</h3><p>当我们npm run dev之后，输入<code>localhost</code>没有任何问题，但是当我们输入<code>本机ip</code>就会发现，局域网受限。</p>\n<p>这是因为在config/index.js 文件下 host的配置为’localhost’</p>\n<p>当你启动服务之后，也为了自己的项目不让别人通过ip来查看。</p>\n<p>如果你想启用ip来查看，那么我们可以有两种方式处理</p>\n<ul>\n<li><p>第一种</p>\n</li>\n<li><p>config/index.js 文件下 更改host的配置为’0.0.0.0’</p>\n</li>\n<li><p>第二种</p>\n</li>\n<li><p>package.json 文件下 dev 增加 –host 0.0.0.0</p>\n</li>\n</ul>\n<p>配置以上两种任何一种方式，就可以通过ip来访问了。同一个局域网电脑，也可以通过ip来访问。</p>\n<p>当我完成以上配置后，信心满满准备在移动端访问，结果，又是受限</p>\n<p>崩溃啊！！！</p>\n<p>继续查看文件，此时我查看的是， config/index.js</p>\n<p>因为这个是配置的整体内容</p>\n<p>此时，一段代码引起了我的注意</p>\n<p>devtool: ‘cheap-module-eval-source-map’</p>\n<p>此时，我们扩展一下内容</p>\n<h3 id=\"webpack-sourcemap-选项多种模式的一些解释\"><a href=\"#webpack-sourcemap-选项多种模式的一些解释\" class=\"headerlink\" title=\"webpack sourcemap 选项多种模式的一些解释\"></a>webpack sourcemap 选项多种模式的一些解释</h3><p>有人说 Webpack 难用，原因是 sourcemap 有 7 种，咱们就尝试解释下这些选项都是什么意思，不仅如此，咱们还会分析如何用最好的姿势使用这些配置。</p>\n<ul>\n<li><p><code>eval</code> 文档上解释的很明白，每个模块都封装到 <code>eval</code> 包裹起来，并在后面添加 //# sourceURL</p>\n</li>\n<li><p><code>source-ma</code>p 这是最原始的 <code>source-map</code> 实现方式，其实现是打包代码同时创建一个新的 <code>sourcemap</code> 文件， 并在打包文件的末尾添加 //# sourceURL 注释行告诉 JS 引擎文件在哪儿</p>\n</li>\n<li><p><code>hidden-source-map</code> 文档上也说了，就是 <code>soucremap</code> 但没注释，没注释怎么找文件呢？貌似只能靠后缀，譬如 xxx/bundle.js 文件，某些引擎会尝试去找 xxx/bundle.js.map</p>\n</li>\n<li><p><code>inline-source-map</code> 为每一个文件添加 sourcemap 的 DataUrl，注意这里的文件是打包前的每一个文件而不是最后打包出来的，同时这个 DataUrl 是包含一个文件完整 souremap 信息的 Base64 格式化后的字符串，而不是一个 url。</p>\n</li>\n<li><p><code>eval-source-map</code> 这个就是把 eval 的 sourceURL 换成了完整 souremap 信息的 DataUrl</p>\n</li>\n<li><p><code>cheap-source-map</code> 不包含列信息，不包含 loader 的 sourcemap，（譬如 babel 的 sourcemap）</p>\n</li>\n<li><p><code>cheap-module-source-map</code> 不包含列信息，同时 loader 的 sourcemap 也被简化为只包含对应行的。最终的 sourcemap 只有一份，它是 webpack 对 loader 生成的 sourcemap 进行简化，然后再次生成的。</p>\n</li>\n</ul>\n<p>webpack 不仅支持这 7 种，而且它们还是可以任意组合的，就如文档所说，你可以设置 souremap 选项为 cheap-module-inline-source-map。</p>\n<p>这么多模式，到底该用哪个？</p>\n<p>cheap-module-eval-source-map 绝大多数情况下都会是最好的选择，这也是下版本 webpack 的默认选项。</p>\n<p>相关解释：</p>\n<ul>\n<li><p>大部分情况我们调试并不关心列信息，而且就算 sourcemap 没有列，有些浏览器引擎（例如 v8） 也会给出列信息，所以我们使用 cheap 模式可以大幅提高 souremap 生成的效率。</p>\n</li>\n<li><p>使用 eval 方式可大幅提高持续构建效率，参考 webapck devtool 文档 下方速度对比表格，这对经常需要边改边调的前端开发而言，非常重要！</p>\n</li>\n<li><p>使用 module 可支持 babel 这种预编译工具（在 webpack 里做为 loader 使用）。</p>\n</li>\n<li><p>eval-source-map 使用 DataUrl 本身包含完整 sourcemap 信息，并不需要像 sourceURL 那样，浏览器需要发送一个完整请求去获取 sourcemap 文件，这会略微提高点效率</p>\n</li>\n</ul>\n<h3 id=\"解决此问题就是配置成这样-devtool-‘-inline-eval-cheap-source-map’\"><a href=\"#解决此问题就是配置成这样-devtool-‘-inline-eval-cheap-source-map’\" class=\"headerlink\" title=\"解决此问题就是配置成这样 devtool: ‘#inline-eval-cheap-source-map’\"></a>解决此问题就是配置成这样 devtool: ‘#inline-eval-cheap-source-map’</h3><p>看到问题不要怕，这是我们做技术最希望遇到的，因为你可以非常快的提升，当你长时间没遇到问题，你觉得会有好处么？</p>\n","categories":[],"tags":[]}